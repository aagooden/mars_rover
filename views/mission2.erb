<style>
  .mars_pic {
    background-image: url("/mars_surface.png");
    /* background-repeat: no-repeat; */
    background-size: cover;
  }
  #cheese{
    position:relative;
    width:600px;
    height:600px;
    margin: 0 auto;
}
#historyCanvas,#grid_canvas,#roverCanvas{
    position:absolute; top:0px; left:0px;
    width:600px;
    height:600px;
}
</style>

<body background="surface_control.jpg" onload="create_div()">

  <img id="rover_image" style="display: none;" src="red-rover.png">


  <audio id="boomAudio">
    <source src="/explosion_sound.mp3" type="audio/mpeg">
  </audio>


  <%rover1_route = session[:rover_routes]["rover1"]%>
  <%rover2_route = session[:rover_routes]["rover2"]%>


  <div id="cheese" class = "whiz">
    <canvas  id="grid_canvas" class="mars_pic" width="600" height="600"></canvas>
    <canvas  id="historyCanvas" width="600" height="600"></canvas>
    <canvas  id="roverCanvas" width="600" height="600"></canvas>

  </div>

</body>

<script>

var grid_string = '<%= session[:grid_size].to_json %>';
var grid_size = JSON.parse(grid_string);
var all_rovers_hash = JSON.parse('<%= session[:rover_routes].to_json %>');
var all_rovers_array = [];
var rover_array_counter = 0;
var line_x_offset = 0;
var line_y_offset = 0;
var history_canvas = document.getElementById('historyCanvas');
var history_ctx = history_canvas.getContext("2d");
var line_color = "red";
var iterateRoverArray_counter = 0
var largest_grid_size = Math.max(grid_size[0], grid_size[1]);
var multiplyer = 600 / (largest_grid_size + 1);
var explosionArray = [];
var finished_animation = false;
var end_of_moves_array = false;

for (var index in all_rovers_hash) {
  all_rovers_array.push(all_rovers_hash[index]);
}

var position1_array = all_rovers_array[0][0];
var position2_array = all_rovers_array[0][0];


function drawGrid(grid_size) {
    var c = document.getElementById("grid_canvas");
    var ctx = c.getContext("2d");
    ctx.lineWidth = 1;
    ctx.strokeStyle = "green";
    // ctx.strokeRect(2,2,498,498);
    //draw vertical lines
    var i;
    // console.log(`multiplyer is ${multiplyer}`)
    for (i = 0; i < grid_size[0] + 2; i++) {
        ctx.moveTo(multiplyer * i, 0);
        ctx.lineTo(multiplyer * i, (grid_size[1] + 1) * multiplyer);
        ctx.stroke();
    }
    //draw horizontal lines
    // console.log(`multiplyer is ${multiplyer}`)
    for (i = 0; i < grid_size[1] + 2; i++) {
        ctx.moveTo(0, multiplyer * i);
        ctx.lineTo((grid_size[0] + 1) * multiplyer, multiplyer * i);
        ctx.stroke();
    }
}


function get_next_rover_array() {
    console.log("Hitting get_next_rover_array")
    current_rover_array = all_rovers_array[rover_array_counter];
    console.log(`current_rover_array is ${current_rover_array}`);
    rover_array_counter += 1
    end_of_moves_array = false;
    iterateRoverArray_counter = 0;
    // iterateRoverArray();
    console.log("Sending to traffic_cop from get_next_rover_array")
    // traffic_cop();
}


function traffic_cop() {
        // console.log("Hitting traffic_cop")
        console.log(`postion1_array in traffic_cop is ${position1_array}`);
        console.log(`postion2_array in traffic_cop is ${position2_array}`);
    // if(check_if_explosion()) {
    //     // console.log("Hitting check_if_explosion conditional")
    //     // window.setTimeout(draw_explosion(position2_array), 2000);
    //     draw_explosion(position2_array);
    //     get_next_rover_array_setup();
    //     get_next_rover_array();
    //
    // } else

    if(end_of_moves_array == true) {
        draw_rover_history_image(position2_array);
        if(check_if_explosion()) {
            draw_explosion(position2_array);
        } else {
          explosionArray.push(position2_array);
        }
        setTimeout(get_next_rover_array_setup(),2000);
        get_next_rover_array_setup();
        get_next_rover_array();
        iterateRoverArray();
        traffic_cop();

    } else if(check_if_rotation()) {
        finished_animation = false;
        rotate_rover();
        wait_for_animation();;
        function wait_for_animation(){
          if(finished_animation == true){
              if(check_if_explosion()) {
                explode();
              }
              iterateRoverArray();
              traffic_cop();
          } else {
            setTimeout(wait_for_animation,10);
          }
        }

    } else if(check_if_move()) {
        finished_animation = false;
        move_rover();
        wait_for_animation();
        function wait_for_animation(){
          if(finished_animation == true){
            if(check_if_explosion()) {
                explode();
            } else {
              iterateRoverArray();
              traffic_cop();
            }

          } else {
            setTimeout(wait_for_animation,50);
          }
        }
        }

}


function explode(){
  draw_explosion(position2_array);

  setTimeout(clearExplosion,700);

  function clearExplosion(){
    var history_canvas = document.getElementById('historyCanvas');
    var history_ctx = history_canvas.getContext("2d");
    var history_img = new Image;
    history_img.src = '/scorch.png';
    var x_position = (position2_array[0] * multiplyer);
    var y_position = (((grid_size[1]) - position2_array[1]) * multiplyer);
    history_ctx.clearRect(x_position, y_position, multiplyer, multiplyer); // clears explosion and rovers at that position.

    var rover_canvas = document.getElementById('roverCanvas');
    var ctx = rover_canvas.getContext("2d");
    ctx.clearRect(x_position, y_position, multiplyer, multiplyer); // clears last rover draw from rover canvas(ctx).

    setTimeout(drawScorch, 10);
  function drawScorch() {
    var history_canvas = document.getElementById('historyCanvas');
    var history_ctx = history_canvas.getContext("2d");
    var history_img = new Image;
    history_img.src = '/scorch.png';
    history_ctx.drawImage(history_img, x_position, y_position, multiplyer * 1, multiplyer * 1);
    console.log("drew scorch");
  }

  iterateRoverArray();
  traffic_cop();
  }

  for(pos of explosionArray){
    if (pos[0] == position2_array[0] && pos[1] == position2_array[1]){ //selects the correct position from explosion array.  Has to be done this way because directions are not necessarily the same in the position arrays.
      var index = explosionArray.indexOf(pos);
    }
  }

  explosionArray.splice(index, 1); // deletes the position(where explosion happened) from explosionArray

  get_next_rover_array_setup();
  get_next_rover_array();
}


function iterateRoverArray() {
  console.log(`iterateRoverArray_counter at the beginning of iterateRoverArray is ${iterateRoverArray_counter}`);
  position1_array = current_rover_array[iterateRoverArray_counter];
  position2_array = current_rover_array[iterateRoverArray_counter + 1];
    if (position2_array === undefined) { // this happens if we have come to the end of the current_rover_array.
      console.log("position2_array is undefined");
      // console.log("this happens if we have come to the end of the current_rover_array")
        position2_array = current_rover_array[current_rover_array.length -1 ];
        position1_array = current_rover_array[current_rover_array.length -1 ];
        end_of_moves_array = true;

    } else {
        position1_array = current_rover_array[iterateRoverArray_counter]; //this happens for every other iterated position in current_rover_array...information is sent to check_if_explosion
        position2_array = current_rover_array[iterateRoverArray_counter + 1];
    }
    console.log(`postion1_array in iterate is ${position1_array}`);
    console.log(`postion2_array in iterate is ${position2_array}`);
      iterateRoverArray_counter += 1;
}


function draw_rover_history_image(position_array) {
    // console.log("Just hit the draw_rotation_image function")
    var history_img = new Image;
    switch (position_array[2]) {
        case "N":
            history_img.src = "/red-rover.png"
            break;
        case "E":
            history_img.src = "/red-rover_E.png"
            break;
        case "S":
            history_img.src = "/red-rover_S.png"
            break;
        case "W":
            history_img.src = "/red-rover_W.png"
            break;
    }
    var history_canvas = document.getElementById('historyCanvas');
    var history_ctx = history_canvas.getContext("2d");
    var x_position = (position_array[0] * multiplyer) + 0.25 * multiplyer;
    var y_position = (((grid_size[1]) - position_array[1]) * multiplyer) + 0.25 * multiplyer
    history_ctx.drawImage(history_img, x_position, y_position, multiplyer * 0.5, multiplyer * 0.5);
    // console.log("At the end of draw_rotation_image");
}


function draw_explosion(danger_zone) {
  var sound = document.getElementById("boomAudio");
    sound.load();

    function playSound(){
      sound.play();
    }
    setTimeout(playSound,100);
    var explosionFrames = [
      '/explosion_frames/frame_00_delay-0.1s.gif', '/explosion_frames/frame_01_delay-0.1s.gif', '/explosion_frames/frame_02_delay-0.1s.gif', '/explosion_frames/frame_03_delay-0.1s.gif', '/explosion_frames/frame_04_delay-0.1s.gif', '/explosion_frames/frame_05_delay-0.1s.gif', '/explosion_frames/frame_06_delay-0.1s.gif', '/explosion_frames/frame_07_delay-0.1s.gif', '/explosion_frames/frame_08_delay-0.1s.gif', '/explosion_frames/frame_09_delay-0.1s.gif', '/explosion_frames/frame_10_delay-0.1s.gif', '/explosion_frames/frame_11_delay-0.1s.gif', '/explosion_frames/frame_12_delay-0.1s.gif', '/explosion_frames/frame_13_delay-0.1s.gif', '/explosion_frames/frame_14_delay-0.1s.gif', '/explosion_frames/frame_15_delay-0.1s.gif', '/explosion_frames/frame_16_delay-0.1s.gif', '/explosion_frames/frame_17_delay-0.1s.gif', '/explosion_frames/frame_18_delay-0.1s.gif', '/explosion_frames/frame_19_delay-0.1s.gif', '/explosion_frames/frame_20_delay-0.1s.gif', '/explosion_frames/frame_21_delay-0.1s.gif', '/explosion_frames/frame_22_delay-0.1s.gif', '/explosion_frames/frame_23_delay-0.1s.gif', '/explosion_frames/frame_24_delay-0.1s.gif', '/explosion_frames/frame_25_delay-0.1s.gif', '/explosion_frames/frame_26_delay-0.1s.gif', '/explosion_frames/frame_27_delay-0.1s.gif', '/explosion_frames/frame_28_delay-0.1s.gif', '/explosion_frames/frame_29_delay-0.1s.gif', '/explosion_frames/frame_30_delay-0.1s.gif', '/scorch.png']
    // history_img.src = "/explosion_frames/frame_23_delay-0.1s.gif";
    var history_canvas = document.getElementById('historyCanvas');
    var history_ctx = history_canvas.getContext("2d");
    var x_position = (danger_zone[0] * multiplyer) + 0.10 * multiplyer;
    var y_position = (((grid_size[1]) - danger_zone[1]) * multiplyer) + 0.10 * multiplyer
    var pic;
    var explosionCounter = 0;
    var history_img = new Image;
    history_img.src = '/explosion_frames/frame_00_delay-0.1s.gif';
  window.requestAnimationFrame(boom);
  function boom(){
              history_ctx.drawImage(history_img, x_position, y_position, multiplyer * 0.75, multiplyer * 0.75);
              console.log("boom");
if (explosionCounter < 31) {
    explosionCounter += 1;
    history_img.src = explosionFrames[explosionCounter];
    window.requestAnimationFrame(boom);
} else {
  console.log("finished boom");
}
}
}


function get_next_rover_array_setup() {
    // selects a random color for rover trail.
    line_color = '#' + (function co(lor) {return (lor += [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'f'][Math.floor(Math.random() * 16)]) && (lor.length == 6) ? lor : co(lor);})('');
    line_x_offset = 3;
    line_y_offset = 3;
    // line_x_offset = Math.floor(Math.random()*6) + 1;
    // line_x_offset *= Math.floor(Math.random()*2) == 1 ? 1 : -1;
    // line_y_offset = line_y_offset;
}


function check_if_explosion() {
    explosionCounter = 0;
    for(positions of explosionArray){
      if(positions[0] == position2_array[0] && positions[1] == position2_array[1]){
        explosionCounter += 1;
      }
    }

    if(explosionCounter > 0) {
        return true;
    } else {
        return false;
    }
}


function check_if_move() {
    if (position1_array[2] == position2_array[2]) {
        return true;
    } else {
        return false;
    }
}


function move_rover() {
    var x = (position1_array[0] * multiplyer) + 0.25 * multiplyer;
    var y = (((grid_size[1]) - position1_array[1]) * multiplyer) + 0.25 * multiplyer;
    var direction = position1_array[2];
    var loops = multiplyer;
    setTimeout(drawRover(x, y, direction, loops),500);
}


function check_if_rotation() {
    if (position1_array[2] != position2_array[2]) {
        return true //indicates that the the next action is a rotation
    } else {
        return false;
    }
}


function rotate_rover() {
    var x = (position2_array[0] * multiplyer) + 0.25 * multiplyer;
    var y = ((grid_size[1] - position2_array[1]) * multiplyer) + 0.25 * multiplyer;
    var direction = position2_array[2];
    var loops = 1;
    drawRover(x, y, direction, loops);
}


function drawRover(x, y, direction, loops) {
var animation_counter = 1;
var imgTag = new Image();
var rover_canvas = document.getElementById('roverCanvas');
var ctx = rover_canvas.getContext("2d");
animate();
imgTag.src = "/red-rover.png"; // load image
function animate() {
    ctx.clearRect(0, 0, 600, 600); // clear canvas
    // ctx.drawImage(imgTag, x, y, x_multiplyer * 0.5, x_multiplyer * 0.5);
    if (y < 0) {
        y = rover_canvas.height;
    } else if (y > rover_canvas.height) {
        y = 0;
    } else if (x < 0) {
        x = rover_canvas.width;
    } else if (x > rover_canvas.width) {
        x = 0;
    }
    var previous_x = x;
    var previous_y = y;
    switch (direction) {
        case "N":
            imgTag.src = "/red-rover.png"
            y -= 1
            break;
        case "E":
            imgTag.src = "/red-rover_E.png"
            x += 1
            break;
        case "S":
            imgTag.src = "/red-rover_S.png"
            y += 1
            break;
        case "W":
            imgTag.src = "/red-rover_W.png"
            x -= 1
            break;
    }
    // console.log("DRAW DRAW DRAW");
    ctx.drawImage(imgTag, x, y, multiplyer * 0.5, multiplyer * 0.5);
    history_ctx.lineWidth = 2;
    history_ctx.beginPath();
    history_ctx.strokeStyle = line_color;
    history_ctx.moveTo((previous_x + line_x_offset) + 0.25 * multiplyer, (previous_y + line_y_offset) + 0.25 * multiplyer);
    history_ctx.lineTo((x + line_x_offset) + 0.25 * multiplyer, (y + line_y_offset) + 0.25 * multiplyer);
    history_ctx.stroke();
    history_ctx.closePath();
    // console.log(`Animation counter is ${animation_counter}`);
    // console.log(`loops is ${loops}`);
    if (animation_counter < loops) {
        animation_counter += 1;
        window.requestAnimationFrame(animate)
    } else {
      finished_animation = true;
      // setTimeout(iterateRoverArray(),500);
      // setTimeout(traffic_cop(),500);
    }
}
  // console.log("Should be returning to function call in traffic_cop");


}
function create_div() {
drawGrid(grid_size);
get_next_rover_array();
iterateRoverArray();
traffic_cop();
}
</script>
