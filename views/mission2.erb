<style>
  .mars_pic {
    background-image: url("/mars_surface.png");
    /* background-repeat: no-repeat; */
    background-size: cover;
  }
  #cheese{
    position:relative;
    width:600px;
    height:600px;
    margin: 0 auto;
}
#grid_canvas,#roverCanvas,#historyCanvas{
    position:absolute; top:0px; left:0px;
    width:600px;
    height:600px;

}
</style>

<body background="surface_control.jpg" onload="create_div()">

  <img id="rover_image" style="display: none;" src="red-rover.png">





  <%rover1_route = session[:rover_routes]["rover1"]%>
  <%rover2_route = session[:rover_routes]["rover2"]%>


  <!-- <div id = "load_div"></div> -->

  <!-- <div id = "placehere"></div> -->
  <div id="cheese">
    <canvas  id="grid_canvas" class="mars_pic" width="600" height="600"></canvas>
    <canvas  id="roverCanvas" width="600" height="600"></canvas>
    <canvas  id="historyCanvas" width="600" height="600"></canvas>
  </div>

</body>

<script>

// console.log("You are the coolest dude!");
var grid_string = '<%= session[:grid_size].to_json %>';
var grid_size = JSON.parse(grid_string);

var all_rovers_hash = JSON.parse('<%= session[:rover_routes].to_json %>');
var all_rovers_array = [];
var rover_array_counter = 0;

var line_x_offset = 0;
var line_y_offset = 0;

for (var index in all_rovers_hash) {
  all_rovers_array.push(all_rovers_hash[index]);
}
console.log(all_rovers_array);
var history_canvas = document.getElementById('historyCanvas');
var history_ctx = history_canvas.getContext("2d");
var line_color = "red";
var iterateRoverArray_counter = 0
var largest_grid_size = Math.max(grid_size[0], grid_size[1]);
// console.log(`largest_grid_size is ${largest_grid_size}`)
// console.log(`grid_size is ${grid_size}`)
var multiplyer = 600 / (largest_grid_size + 1);
var position1_array = all_rovers_array[0][0];
var position2_array = all_rovers_array[0][0];
var explosionArray = [];



function drawGrid(grid_size) {
var c = document.getElementById("grid_canvas");
var ctx = c.getContext("2d");
ctx.lineWidth = 1;
ctx.strokeStyle = "green";
// ctx.strokeRect(2,2,498,498);

//draw vertical lines
var i;
// console.log(`multiplyer is ${multiplyer}`)
for (i = 0; i < grid_size[0] + 2; i++) {
    ctx.moveTo(multiplyer * i, 0);
    ctx.lineTo(multiplyer * i, (grid_size[1] + 1) * multiplyer);
    ctx.stroke();
}

//draw horizontal lines
// console.log(`multiplyer is ${multiplyer}`)
for (i = 0; i < grid_size[1] + 2; i++) {
    ctx.moveTo(0, multiplyer * i);
    ctx.lineTo((grid_size[0] + 1) * multiplyer, multiplyer * i);
    ctx.stroke();
}
}

function get_next_rover_array() {
    console.log("Hitting get_next_rover_array")
    current_rover_array = all_rovers_array[rover_array_counter];
    rover_array_counter += 1
    iterateRoverArray_counter = 0;
    traffic_cop();
}

function traffic_cop() {

        console.log("Hitting traffic_cop")
        console.log(`postion1_array in traffic_cop is ${position1_array}`);
        console.log(`postion2_array in traffic_cop is ${position2_array}`);

    if(check_if_explosion()) {
        console.log("Hitting check_if_explosion conditional")
        window.setTimeout(draw_explosion(position2_array), 2000);
        get_next_rover_array_setup();
        get_next_rover_array();
    } else if(check_if_rotation()) {
        console.log("Hitting check_if_rotation conditional")
        window.setTimeout(rotate_rover(),3000);
        console.log("I should now be back from animating...this should print after the animation logs because of the setTimout");
        iterateRoverArray();
        traffic_cop();
    } else if(check_if_move()) {
        console.log("Hitting check_if_move conditional")
        window.setTimeout(move_rover(),3000);
        iterateRoverArray();
        traffic_cop();
    } else {
        console.log("Hitting else conditional in traffic_cop")
        // explosionArray.push(position2_array);
        console.log(`explosionArray is ${explosionArray}`)
        setTimeout(draw_rover_history_image(position2_array),500);
        iterateRoverArray();
        setTimeout(get_next_rover_array, 1000);
    }
}


function iterateRoverArray() {
  console.log("I am now iterating the rover array...watch me iterate!!!")
    if (position2_array === undefined) { // this happens if we have come to the end of the current_rover_array...this information goes to check_if_explosion
      console.log("this happens if we have come to the end of the current_rover_array")
        position2_array = current_rover_array.last;
    } else if (position2_array.length === 0) { // this happens if it is the first move of every rover...this information goes to check_if_explosion
      console.log("this happens if it is the first move of every rover")

        position1_array = current_rover_array[0];
        position2_array = (current_rover_array[0]);
    } else {
      console.log("ELSE ELSE ELSE in iterate function");

        position1_array = current_rover_array[iterateRoverArray_counter]; //this happens for every other iterated position in current_rover_array...information is sent to check_if_explosion
        position2_array = current_rover_array[iterateRoverArray_counter + 1];
    }
}



function draw_rover_history_image(position_array) {
    // console.log("Just hit the draw_rotation_image function")
    var history_img = new Image;
    switch (position_array[2]) {
        case "N":
            history_img.src = "/red-rover.png"
            break;
        case "E":
            history_img.src = "/red-rover_E.png"
            break;
        case "S":
            history_img.src = "/red-rover_S.png"
            break;
        case "W":
            history_img.src = "/red-rover_W.png"
            break;
    }
    var history_canvas = document.getElementById('historyCanvas');
    var history_ctx = history_canvas.getContext("2d");
    var x_position = (position_array[0] * multiplyer) + 0.25 * multiplyer;
    var y_position = (((grid_size[1]) - position_array[1]) * multiplyer) + 0.25 * multiplyer
    // console.log(x_position);
    // console.log(y_position);
    history_ctx.drawImage(history_img, x_position, y_position, multiplyer * 0.5, multiplyer * 0.5);
    // console.log("At the end of draw_rotation_image");
}

function draw_explosion(danger_zone) {
    var history_img = new Image;
    history_img.src = "/rover_explosion.gif";
    var history_canvas = document.getElementById('historyCanvas');
    var history_ctx = history_canvas.getContext("2d");
    var x_position = (danger_zone[0] * multiplyer) + 0.25 * multiplyer;
    var y_position = (((grid_size[1]) - danger_zone[1]) * multiplyer) + 0.25 * multiplyer
}




function get_next_rover_array_setup() {
    // selects a random color for rover trail.
    // line_color = '#' + (function co(lor) {return (lor += [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'f'][Math.floor(Math.random() * 16)]) && (lor.length == 6) ? lor : co(lor);})('');
    line_x_offset = 3;
    line_y_offset = 3;
    // line_x_offset = Math.floor(Math.random()*6) + 1;
    // line_x_offset *= Math.floor(Math.random()*2) == 1 ? 1 : -1;
    // line_y_offset = line_y_offset;
}

function check_if_explosion() {
    console.log("Hitting check_if_explosion function")
    console.log(`This is the explosionArray ${explosionArray}`)
    if (explosionArray.includes(position1_array) || explosionArray.includes(position2_array)) {
        return true;
    } else {
        return false;
    }
}

    function check_if_move() {
      console.log("hitting check_if_move function")
        console.log(`position1_array[2] is ${position1_array[2]}`);
        console.log(`position2_array[2] is ${position2_array[2]}`);
        if (position1_array[2] == position2_array[2]) {
            console.log("check_if_move is returning true")
            return true;
        } else {
          console.log("check_if_move is returning false")

            return false;
        }
    }

    function move_rover() {
        var x = (position1_array[0] * multiplyer) + 0.25 * multiplyer;
        // console.log(`x at its a move is ${x}`);
        var y = (((grid_size[1]) - position1_array[1]) * multiplyer) + 0.25 * multiplyer;
        // console.log(`y at its a move is ${y}`);
        var direction = position1_array[2];
        var loops = multiplyer;
        // console.log(`loops at this point in the move is ${loops}`);
        iterateRoverArray_counter += 1;
        setTimeout(drawRover(x, y, direction, loops),500);
    }

    function check_if_rotation() {
        if (position1_array[2] != position2_array[2]) {
            return true //indicates that the the next action is a rotation
        } else {
            return false;
        }
    }

    function rotate_rover() {
        // console.log("It's a rotation");
        var x = (position2_array[0] * multiplyer) + 0.25 * multiplyer;
        var y = ((grid_size[1] - position2_array[1]) * multiplyer) + 0.25 * multiplyer;
        // console.log(`x is currently ${x}`);
        // console.log(`y is currently ${y}`);
        var direction = position2_array[2];
        var loops = 1;
        iterateRoverArray_counter += 1;
        drawRover(x, y, direction, loops);
    }

function drawRover(x, y, direction, loops) {
var animation_counter = 1;
var imgTag = new Image();
var rover_canvas = document.getElementById('roverCanvas');
var ctx = rover_canvas.getContext("2d");

animate();
imgTag.src = "/red-rover.png"; // load image
function animate() {
    ctx.clearRect(0, 0, 600, 600); // clear canvas
    // ctx.drawImage(imgTag, x, y, x_multiplyer * 0.5, x_multiplyer * 0.5);
    if (y < 0) {
        y = rover_canvas.height;
    } else if (y > rover_canvas.height) {
        y = 0;
    } else if (x < 0) {
        x = rover_canvas.width;
    } else if (x > rover_canvas.width) {
        x = 0;
    }
    var previous_x = x;
    var previous_y = y;
    switch (direction) {
        case "N":
            imgTag.src = "/red-rover.png"
            y -= 1
            break;
        case "E":
            imgTag.src = "/red-rover_E.png"
            x += 1
            break;
        case "S":
            imgTag.src = "/red-rover_S.png"
            y += 1
            break;
        case "W":
            imgTag.src = "/red-rover_W.png"
            x -= 1
            break;
    }
    console.log("DRAW DRAW DRAW");
    ctx.drawImage(imgTag, x, y, multiplyer * 0.5, multiplyer * 0.5);

    history_ctx.lineWidth = 2;

    history_ctx.beginPath();
    history_ctx.strokeStyle = line_color;
    history_ctx.moveTo((previous_x + line_x_offset) + 0.25 * multiplyer, (previous_y + line_y_offset) + 0.25 * multiplyer);
    history_ctx.lineTo((x + line_x_offset) + 0.25 * multiplyer, (y + line_y_offset) + 0.25 * multiplyer);
    history_ctx.stroke();
    history_ctx.closePath();
    console.log(`Animation counter is ${animation_counter}`);
    console.log(`loops is ${loops}`);
    if (animation_counter < loops) {
        animation_counter += 1;
        window.requestAnimationFrame(animate)
    }
}
  console.log("Should be returning to function call in traffic_cop");
}

function create_div() {
setTimeout(drawGrid(grid_size),500);
setTimeout(draw_rover_history_image(position1_array),500);
position1_array = all_rovers_array[0][0];
position2_array = all_rovers_array[0][1];
get_next_rover_array();
}
</script>
